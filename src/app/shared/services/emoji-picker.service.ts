import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';

@Injectable({
  providedIn: 'root',
})
export class EmojiPickerService {
  // MessageBox Picker States
  private isMessageBoxMainPickerOpen = new BehaviorSubject<boolean>(false);
  private isMessageBoxThreadPickerOpen = new BehaviorSubject<boolean>(false);
  private isMessageBoxCreateMessagePickerOpen = new BehaviorSubject<boolean>(false);
  public displayParentMsg = new BehaviorSubject<boolean>(false);
  
  public isChatBoxPickerOpen = new BehaviorSubject<boolean>(false);
  public chatBoxEmojiPickerForId = new BehaviorSubject<string>('');

  isMessageBoxMainPickerOpen$ = this.isMessageBoxMainPickerOpen.asObservable();
  isMessageBoxThreadPickerOpen$ = this.isMessageBoxThreadPickerOpen.asObservable();
  isMessageBoxCreateMessagePickerOpen$ = this.isMessageBoxCreateMessagePickerOpen.asObservable();
  displayParentMsg$ = this.displayParentMsg.asObservable();
  isChatBoxPickerOpen$ = this.isChatBoxPickerOpen.asObservable();
  chatBoxEmojiPickerForId$ = this.chatBoxEmojiPickerForId.asObservable();

  constructor() {
    this.chatBoxEmojiPickerForId$.subscribe((id) => {
      console.log(`üîç chatBoxEmojiPickerForId ge√§ndert: ${id}`);
    });
  }

  /** √ñffnet oder schlie√üt den Main-Chat Emoji-Picker */
  toggleMsgBoxEmojiPickerMain() {
    if (this.isMessageBoxMainPickerOpen.value) {
      this.isMessageBoxMainPickerOpen.next(false);
    } else {
      this.isMessageBoxThreadPickerOpen.next(false);
      this.isMessageBoxMainPickerOpen.next(true);
    }
  }

  /** √ñffnet oder schlie√üt den Thread-Chat Emoji-Picker */
  toggleMsgBoxEmojiPickerThread() {
    if (this.isMessageBoxThreadPickerOpen.value) {
      this.isMessageBoxThreadPickerOpen.next(false);
    } else {
      this.isMessageBoxMainPickerOpen.next(false);
      this.isMessageBoxThreadPickerOpen.next(true);
    }
  }

  /** √ñffnet oder schlie√üt den Create-Message Emoji-Picker */
  toggleMsgBoxCreateMessageEmojiPicker() {
    if (this.isMessageBoxCreateMessagePickerOpen.value) {
      this.isMessageBoxCreateMessagePickerOpen.next(false);
    } else {
      this.isMessageBoxCreateMessagePickerOpen.next(true);
    }
  }

/** √ñffnet oder schlie√üt einen Emoji-Picker f√ºr eine bestimmte Nachricht */
openChatBoxEmojiPicker(messageId: string) {
  console.log(`üü¢ openChatBoxEmojiPicker() wird aufgerufen mit messageId: ${messageId}`);
  if (this.chatBoxEmojiPickerForId.value === messageId) {
    console.log('üî¥ Picker ist bereits offen, wird geschlossen...');
  } else {
    console.log(`‚úÖ Emoji Picker wird f√ºr ID ${messageId} ge√∂ffnet.`);
    this.chatBoxEmojiPickerForId.next(messageId);
    this.isChatBoxPickerOpen.next(true);
    console.log(`üü¢ Neuer Picker-Wert: ${this.chatBoxEmojiPickerForId.value}`);
  }
}

openParentMessageEmojiPicker(messageId: string) {
  console.log(`üü¢ openParentMessageEmojiPicker() wird aufgerufen mit messageId: ${messageId}`);
  if (this.chatBoxEmojiPickerForId.value === messageId) {
    console.log('üî¥ Picker ist bereits offen, wird geschlossen...');
  } else {
    console.log(`‚úÖ Emoji Picker wird f√ºr ID ${messageId} ge√∂ffnet.`);
    this.displayParentMsg.next(true);
    this.chatBoxEmojiPickerForId.next(messageId);
    console.log(`üü¢ Neuer Picker-Wert: ${this.chatBoxEmojiPickerForId.value}`);
  }
}

closeParentMessageEmojiPicker() {
  this.displayParentMsg.next(false);
  this.chatBoxEmojiPickerForId.next('');
}

  /** Schlie√üt den Emoji-Picker f√ºr Nachrichten */
  closeChatBoxEmojiPicker() {
    this.chatBoxEmojiPickerForId.next('');
    this.isChatBoxPickerOpen.next(false);
  }

  /** Schlie√üt alle Emoji-Picker */
/** Schlie√üt alle Emoji-Picker */
  closeAllEmojiPickers() {
    console.log('üõë closeAllEmojiPickers() wird aufgerufen - Alle Picker werden geschlossen!');
    console.trace(); // Zeigt die genaue Aufrufquelle in der Konsole
    this.isMessageBoxMainPickerOpen.next(false);
    this.isMessageBoxThreadPickerOpen.next(false);
    this.isMessageBoxCreateMessagePickerOpen.next(false);
    this.isChatBoxPickerOpen.next(false);
    this.chatBoxEmojiPickerForId.next('');
  }
}